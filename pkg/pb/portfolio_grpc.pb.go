// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pkg/pb/portfolio.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortfolioClient is the client API for Portfolio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortfolioClient interface {
	// return list of skills
	ListSkills(ctx context.Context, in *SkillRequest, opts ...grpc.CallOption) (*SkillResponse, error)
}

type portfolioClient struct {
	cc grpc.ClientConnInterface
}

func NewPortfolioClient(cc grpc.ClientConnInterface) PortfolioClient {
	return &portfolioClient{cc}
}

func (c *portfolioClient) ListSkills(ctx context.Context, in *SkillRequest, opts ...grpc.CallOption) (*SkillResponse, error) {
	out := new(SkillResponse)
	err := c.cc.Invoke(ctx, "/portfolio.portfolio/ListSkills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortfolioServer is the server API for Portfolio service.
// All implementations must embed UnimplementedPortfolioServer
// for forward compatibility
type PortfolioServer interface {
	// return list of skills
	ListSkills(context.Context, *SkillRequest) (*SkillResponse, error)
	mustEmbedUnimplementedPortfolioServer()
}

// UnimplementedPortfolioServer must be embedded to have forward compatible implementations.
type UnimplementedPortfolioServer struct {
}

func (UnimplementedPortfolioServer) ListSkills(context.Context, *SkillRequest) (*SkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkills not implemented")
}
func (UnimplementedPortfolioServer) mustEmbedUnimplementedPortfolioServer() {}

// UnsafePortfolioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortfolioServer will
// result in compilation errors.
type UnsafePortfolioServer interface {
	mustEmbedUnimplementedPortfolioServer()
}

func RegisterPortfolioServer(s grpc.ServiceRegistrar, srv PortfolioServer) {
	s.RegisterService(&Portfolio_ServiceDesc, srv)
}

func _Portfolio_ListSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).ListSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.portfolio/ListSkills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).ListSkills(ctx, req.(*SkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Portfolio_ServiceDesc is the grpc.ServiceDesc for Portfolio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Portfolio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "portfolio.portfolio",
	HandlerType: (*PortfolioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSkills",
			Handler:    _Portfolio_ListSkills_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/portfolio.proto",
}
